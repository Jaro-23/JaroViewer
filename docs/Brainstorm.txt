Requirements:
	- 2D and 3D engine
	- A component can contain another component
	- The position of a component is relative to it's parent
	- It's easy to create new components
	- The 2D engine has an debug component that can be reached from anywhere
	- The 3D engine is placeable inside the 2D component (It is something like a window inside all 2D components)
	- 3D engine can handle point lights, directional lights and spotlights
	- 3D engine can handle a skybox
	- There is easy use for textures and shaders(vertex, [optional]geometry, fragment)
	- Can handle models without lag if many models have to be used
	- 2D component that can be used for logging from anywhere
	- Plot rendering in 2D and 3D
	- Works with opengl
	- Can use files for loading 3D components

Solutions:
	- Logger to be a singleton so it can be accessed from anywhere
	- Passing an offset to next component so the position will be relative
	- A lightset so it can be easy to pass to components
	- Objects for loading textures and shaders
	- Model factory so all points of a model have to be loaded once
	- Interface of 2D and 3D components that do implement basic functionality that is shared over all components

Needs to be researched:
	- Refresh everything
	- How models work
	- Learn how to work with premake to build projects
